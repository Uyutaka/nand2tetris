// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M=contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 1st Mux
    DMux(in=true, sel=instruction[15], a=AOrder, b=COrder);
    Mux16(a=instruction, b=outALU, sel=COrder, out=fstMuxout);

    // A Register
    Or(a=AOrder, b=instruction[5], out=AregisterOn);
    ARegister(in=fstMuxout, load=AregisterOn, out=outAResigter, out[0..14]=addressM);

    // 2ndMux
    Mux16(a=outAResigter, b=inM, sel=instruction[12], out=outSecMux);

    // D Register
    And(a=instruction[4], b=COrder, out=DregisterOn);
    DRegister(in=outALU, load=DregisterOn, out=outDRegister);

    // ALU
    ALU(x=outDRegister,
        y=outSecMux,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outALU,
        out=outM,
        zr=zr,
        ng=ng
    );

    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=ng, b=instruction[2], out=trueJ1);
    And(a=zr, b=instruction[1], out=trueJ2);
    Or(a=ng, b=zr, out=notPositive);
    Not(in=notPositive, out=positive);
    And(a=positive, b=instruction[0], out=trueJ3);

    // PC
    Or(a=trueJ1, b=trueJ2, out=trueJ1and2);
    Or(a=trueJ1and2, b=trueJ3, out=trueJ1and2and3);
    And(a=trueJ1and2and3, b=instruction[15], out=loadPC);
    Not(in=loadPC, out=incPC);

    PC(
        in=outAResigter,
        inc=incPC,
        load=loadPC,
        reset=reset,
        out[0..14]=pc
    );
}